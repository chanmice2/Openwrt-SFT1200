diff -uprN backports-4.19.7-1.orig/include/net/cfg80211.h backports-4.19.7-1.new/include/net/cfg80211.h
--- backports-4.19.7-1.orig/include/net/cfg80211.h	2019-12-06 10:05:02.812636363 +0800
+++ backports-4.19.7-1.new/include/net/cfg80211.h	2019-12-06 10:17:06.104666717 +0800
@@ -595,6 +595,13 @@ bool cfg80211_chandef_usable(struct wiph
 			     u32 prohibited_flags);
 
 /**
+ * cfg80211_chandef_dfs_available - checks if radar channel is available
+ * returns: true available, false not available.
+ */
+bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
+			const struct cfg80211_chan_def *chandef);
+
+/**
  * cfg80211_chandef_dfs_required - checks if radar detection is required
  * @wiphy: the wiphy to validate against
  * @chandef: the channel definition to check
diff -uprN backports-4.19.7-1.orig/net/mac80211/chan.c backports-4.19.7-1.new/net/mac80211/chan.c
--- backports-4.19.7-1.orig/net/mac80211/chan.c	2019-12-06 10:05:02.708636359 +0800
+++ backports-4.19.7-1.new/net/mac80211/chan.c	2019-12-06 10:15:52.296663619 +0800
@@ -1604,7 +1604,10 @@ int ieee80211_vif_use_channel(struct iee
 	ieee80211_recalc_smps_chanctx(local, ctx);
 	ieee80211_recalc_radar_chanctx(local, ctx);
  out:
-	if (ret)
+	/* we call cfg80211_chandef_dfs_available here to set radar_required false
+	 * when chandef is available, or we can't scan on radar channel.
+	 */
+	if (ret || cfg80211_chandef_dfs_available(local->hw.wiphy, chandef))
 		sdata->radar_required = false;
 
 	mutex_unlock(&local->chanctx_mtx);
diff -uprN backports-4.19.7-1.orig/net/wireless/chan.c backports-4.19.7-1.new/net/wireless/chan.c
--- backports-4.19.7-1.orig/net/wireless/chan.c	2019-12-06 10:05:02.696636358 +0800
+++ backports-4.19.7-1.new/net/wireless/chan.c	2019-12-06 10:18:18.600669759 +0800
@@ -609,8 +609,8 @@ static bool cfg80211_get_chans_dfs_avail
 	return true;
 }
 
-static bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
-				const struct cfg80211_chan_def *chandef)
+bool cfg80211_chandef_dfs_available(struct wiphy *wiphy,
+			const struct cfg80211_chan_def *chandef)
 {
 	int width;
 	int r;
@@ -643,6 +643,7 @@ static bool cfg80211_chandef_dfs_availab
 
 	return r;
 }
+EXPORT_SYMBOL(cfg80211_chandef_dfs_available);
 
 static unsigned int cfg80211_get_chans_dfs_cac_time(struct wiphy *wiphy,
 						    u32 center_freq,
